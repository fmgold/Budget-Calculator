{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleDelete","handleEdit","id","clearItems","charge","amount","className","aria-label","onClick","ExpenseList","expenses","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpense","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuid","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d290418.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MdDelete, MdEdit } from 'react-icons/md';\r\n\r\nconst ExpenseItem = ({ expense, handleDelete, handleEdit, clearItems }) => {\r\n  const { id, charge, amount } = expense;\r\n  return (\r\n    <li className=\"item\">\r\n      <div className=\"info\">\r\n        <span className=\"expense\">{charge}</span>\r\n        <span className=\"amount\">${amount}</span>\r\n      </div>\r\n      <div>\r\n        <button className=\"edit-btn\" aria-label=\"edit button\" onClick={()=>handleEdit(id)}> <MdEdit/> </button>\r\n        <button className=\"clear-btn\" aria-label=\"delete button\" onClick={()=>handleDelete(id)} > <MdDelete/> </button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n","import React from 'react';\r\nimport Item from \"./ExpenseItem\";\r\nimport { MdDelete } from 'react-icons/md';\r\n\r\nconst ExpenseList = ({expenses, handleDelete, handleEdit, clearItems}) => {\r\n  \r\n  return (\r\n    <>\r\n        <ul className='list'>\r\n            {expenses.map((expense)=>{\r\n              return <Item key={expense.id} expense={expense} handleEdit={handleEdit}  handleDelete={handleDelete} />\r\n            })}\r\n        </ul>\r\n        {expenses.length > 0 && <button className=\"btn\" onClick={clearItems} >Clear Expenses <MdDelete className=\"btn-icon\"/> </button>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExpenseList;\r\n","import React from 'react';\r\nimport { MdSend } from 'react-icons/md';\r\n\r\nconst ExpenseForm = ({charge, amount, handleCharge, handleAmount, handleSubmit, edit}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n        <div className=\"form-center\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"charge\">charge</label>\r\n              <input \r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"charge\"\r\n                name=\"charge\"\r\n                placeholder=\"e.g clothe\"\r\n                value={charge}\r\n                onChange={handleCharge}\r\n        \r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"amount\">amount</label>\r\n              <input \r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                id=\"amount\"\r\n                name=\"amount\"\r\n                placeholder=\"e.g 100\"\r\n                value={amount}\r\n                onChange={handleAmount}\r\n        \r\n              />\r\n            </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn\">\r\n          {edit ? \"edit\" : \"submit\"}\r\n          <MdSend className=\"btn-icon\" />\r\n        </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ExpenseForm;\r\n","import React from 'react';\r\n\r\nconst Alert = ({type, text}) => {\r\n  return (\r\n    <div className={`alert alert-${type}`}>\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ExpenseList from './components/ExpenseList';\r\nimport ExpenseForm from './components/ExpenseForm';\r\nimport Alert from './components/Alert';\r\n\r\nimport uuid from 'uuid/v4'\r\n\r\n//const initialExpense = [\r\n //{ id: uuid(), charge: \"rent\", amount: 1600 },\r\n  //{ id: uuid(), charge: \"laundry\", amount: 1800 },\r\n  //{ id: uuid(), charge: \"clothe\", amount: 2600 },\r\n//]\r\n\r\nconst initialExpense = localStorage.getItem(\"expenses\") ? \r\nJSON.parse(localStorage.getItem(\"expenses\")) : [];\r\n\r\n\r\n\r\nfunction App() {\r\n  // ************** state values **************\r\n  // all expenses, add expense\r\n  const [expenses, setExpenses] = useState(initialExpense);\r\n  // single expense\r\n  const [charge, setCharge] = useState('');\r\n  // single amount\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const [alert, setAlert] = useState({show:false});\r\n\r\n  const [edit, setEdit] = useState(false);\r\n  const [id, setId] = useState(0);\r\n\r\n// ***************use effect****************\r\n\r\nuseEffect(()=>{\r\n  console.log('wec called useeffect');\r\n  localStorage.setItem(\"expenses\", JSON.stringify(expenses));\r\n}, [expenses]);\r\n\r\n\r\n// ***************functionality****************\r\n  const handleCharge = e => {\r\n    console.log(`charge : ${e.target.value}`);\r\n    setCharge(e.target.value);\r\n  }\r\n\r\n  const handleAmount = e => {\r\n    console.log(`amount : ${e.target.value}`);\r\n    setAmount(e.target.value);\r\n  }\r\n  \r\n   const handleAlert = ({text, type}) => {\r\n     setAlert({show:true, text, type})\r\n     setTimeout(()=>{\r\n       setAlert({show:false});\r\n     }, 3000)\r\n   }\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if(charge !== \"\" && amount >= 0){\r\n        if(edit){\r\n          let tempExpenses = expenses.map(item=>{\r\n            return item.id===id ? {...item, charge, amount} : item;\r\n          });\r\n          setExpenses(tempExpenses);\r\n          setEdit(false);\r\n          handleAlert({type:\"success\", text:\"item edited\" });\r\n        }else{\r\n          const singleExpense = { id:uuid(), charge, amount };\r\n        setExpenses([...expenses, singleExpense])\r\n        handleAlert({type:\"success\", text:\"item added\" });\r\n        }\r\n        \r\n        setAmount(\"\");\r\n        setCharge(\"\");\r\n\r\n    }else{\r\n      handleAlert({type:\"danger\", text:`charge can't be empty and amount must be bigger than zero`});\r\n    }\r\n    \r\n  }\r\n\r\n  // handle delete\r\n  const handleDelete = id => {\r\n    let tempExpenses = expenses.filter(item=>item.id !== id);\r\n    setExpenses(tempExpenses);\r\n    handleAlert({type:\"danger\", text: \"item deleted\"});\r\n\r\n  }\r\n  // handle edit\r\n  const handleEdit = id =>{\r\n    let expense = expenses.find(item=>item.id === id);\r\n    let {charge, amount} = expense;\r\n    setCharge(charge);\r\n    setAmount(amount);\r\n    setEdit(true);\r\n    setId(id);\r\n  }\r\n  // clearItem\r\n  const clearItems = ()=>{\r\n    setExpenses([]);\r\n    handleAlert({type:\"danger\", text: \"all items deleted\"});\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {alert.show && <Alert type={alert.type} text={alert.text}/> }\r\n      <Alert />\r\n      <h1>Budget Calculator</h1>\r\n      <main className=\"App\">\r\n        <ExpenseForm \r\n          charge={charge}\r\n          amount={amount}\r\n          handleAmount={handleAmount}\r\n          handleCharge={handleCharge}\r\n          handleSubmit={handleSubmit}\r\n          edit={edit}\r\n        />\r\n        <ExpenseList expenses={expenses} \r\n          handleDelete={handleDelete}\r\n          handleEdit={handleEdit}\r\n          clearItems={clearItems}\r\n          \r\n        />\r\n      </main>\r\n      <h1>\r\n        total spending: {\" \"}\r\n        <span className=\"total\">\r\n          $ {\" \"}\r\n          {expenses.reduce((acc, curr) => {\r\n            return (acc += parseInt(curr.amount))\r\n          }, 0)}\r\n        </span>\r\n      </h1>\r\n\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}